{"version":3,"sources":["assets/images/logo.svg","common/components/Nav/assets/images/arrow-up-right.svg","common/components/Nav/index.js","common/components/PermissionWidget/components/PermissionSearch/assets/images/magnifying-glass.svg","common/components/Spinner/index.js","common/components/PermissionWidget/components/PermissionSearch/index.js","common/components/PermissionWidget/components/BankPermission/assets/images/chevron-up.svg","common/components/PermissionWidget/components/BankPermission/assets/images/chevron-down.svg","common/components/PermissionWidget/components/StatementModal/index.js","common/components/PermissionWidget/components/BankPermission/index.js","common/components/PermissionWidget/components/PermissionList/index.js","common/components/PermissionWidget/index.js","App.js","reportWebVitals.js","index.js"],"names":["Nav","className","navClassName","classnames","src","logoSVG","alt","href","arrowUpRightSVG","Spinner","size","borderWidth","borderColor","spinnerClasses","style","width","height","defaultProps","PermissionSearch","onSearchChange","isLoading","permissionsClassName","magnifySVG","type","placeholder","onKeyUp","e","currentTarget","value","StatementModal","useState","isPopoverOpen","setIsPopoverOpen","clickMeButtonRef","useRef","Popover","isOpen","positions","padding","onClickOutside","align","ref","content","position","childRect","popoverRect","arrowColor","arrowSize","arrowClassName","onClick","BankPermission","bankName","bankImageUrl","expanded","onExpandChange","bpClassName","isExpanded","role","chevronUpSVG","chevronDownSVG","PermissionList","banks","setExpanded","map","bank","name","imageUrl","PermissionWidget","getBanks","search","setSearch","useQuery","data","a","App","fetch","process","REACT_APP_API_URL","then","res","json","body","console","log","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","queryClient","QueryClient","ReactDOM","render","StrictMode","QueryClientProvider","client","document","getElementById"],"mappings":"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","file":"static/js/main.74f4054a.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.f6933016.svg\";","export default __webpack_public_path__ + \"static/media/arrow-up-right.429f28b0.svg\";","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport classnames from \"classnames\";\nimport logoSVG from \"../../../assets/images/logo.svg\";\nimport arrowUpRightSVG from \"./assets/images/arrow-up-right.svg\";\n\n/**\n *\n * @param {object} props\n * @param {any} props.className\n */\nexport const Nav = ({ className }) => {\n  const navClassName = classnames(\n    \"block w-full bg-m-blue-400 p-12\",\n    \"text-white\",\n    className\n  );\n\n  return (\n    <div className={navClassName}>\n      <div className=\"inline-block w-1/2 align-top\">\n        <img src={logoSVG} alt=\"Mono Logo\" />\n      </div>\n      <div className=\"inline-block w-1/2 align-top text-right\">\n        <a href=\"#/\" className=\"relative\">\n          <span className=\"hidden md:inline\">What is a Statement Page?</span>\n          <span className=\"inline md:hidden\">Help?</span>\n          <img className=\"inline pl-3 align-middle mb-1\" src={arrowUpRightSVG} alt=\"Arrow up right\" />\n        </a>\n      </div>\n    </div>\n  );\n};\n\nNav.propTypes = {\n  className: PropTypes.any,\n};\n","export default __webpack_public_path__ + \"static/media/magnifying-glass.121c7d4f.svg\";","import \"./styles.css\";\n\nimport classnames from \"classnames/dedupe\";\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\n\n/**\n *\n * @param {object} props\n * @param {string} props.size\n * @param {string} props.borderWidth\n * @param {string} props.borderColor\n * @param {any} props.className\n * @returns {JSX.Element}\n */\nexport const Spinner = ({ size, borderWidth, borderColor, className }) => {\n  const spinnerClasses = classnames(\"spinner inline-block\", className);\n  return (\n    <div\n      className={spinnerClasses}\n      style={{ width: size, height: size, borderWidth, borderColor }}\n    ></div>\n  );\n};\n\nSpinner.propTypes = {\n  size: PropTypes.any,\n  borderWidth: PropTypes.any,\n  borderColor: PropTypes.any,\n  className: PropTypes.any,\n};\n\nSpinner.defaultProps = {\n  size: \"1.5rem\",\n  borderWidth: 3,\n  borderColor: \"unset\",\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport classnames from \"classnames\";\nimport magnifySVG from \"./assets/images/magnifying-glass.svg\";\nimport { Spinner } from \"../../../Spinner\";\n\n/**\n * @param {object} props\n * @param {any} props.className\n * @param {(search: string) => Promise<any>} props.onSearchChange\n * @param {boolean} props.isLoading\n */\nexport const PermissionSearch = ({ className, onSearchChange, isLoading }) => {\n  const permissionsClassName = classnames(\n    \"bg-m-gray-400 p-2 font-mono\",\n    className\n  );\n\n  return (\n    <div className={permissionsClassName}>\n      <div className=\"text-center font-semibold py-4\">Choose your bank</div>\n      <div className=\"border border-white rounded py-2 px-4 bg-m-gray-500 shadow relative\">\n        <img\n          src={magnifySVG}\n          className=\"inline-block p-2 pointer-events-none\"\n          alt=\"Magnify\"\n        />\n        <input\n          type=\"search\"\n          className=\"bg-transparent inline-block p-2 w-5/6 outline-none\"\n          placeholder=\"Search for your bank\"\n          onKeyUp={(e) => onSearchChange(e.currentTarget.value)}\n        />\n        {isLoading ? (\n          <Spinner className=\"absolute right-0 top-0 mt-4\" borderColor=\"#FFF\" />\n        ) : null}\n      </div>\n    </div>\n  );\n};\n\nPermissionSearch.propTypes = {\n  className: PropTypes.any,\n  onSearchChange: PropTypes.func,\n  isLoading: PropTypes.bool,\n};\n\nPermissionSearch.defaultProps = {\n  onSearchChange: () => {},\n};\n","export default __webpack_public_path__ + \"static/media/chevron-up.746fbde1.svg\";","export default __webpack_public_path__ + \"static/media/chevron-down.1fe67428.svg\";","import React, { useRef, useState } from \"react\";\nimport { ArrowContainer, Popover } from \"react-tiny-popover\";\n\nexport const StatementModal = () => {\n  const [isPopoverOpen, setIsPopoverOpen] = useState(false);\n\n  const clickMeButtonRef = useRef();\n  return (\n    <Popover\n      isOpen={isPopoverOpen}\n      positions={[\"top\", \"right\", \"left\", \"bottom\"]}\n      padding={10}\n      onClickOutside={() => setIsPopoverOpen(false)}\n      align=\"end\"\n      ref={clickMeButtonRef} // if you'd like a ref to your popover's child, you can grab one here\n      content={({ position, childRect, popoverRect }) => (\n        <ArrowContainer // if you'd like an arrow, you can import the ArrowContainer!\n          position={position}\n          childRect={childRect}\n          popoverRect={popoverRect}\n          arrowColor={\"white\"}\n          arrowSize={10}\n          className=\"popover-arrow-container\"\n          arrowClassName=\"popover-arrow\"\n        >\n          <div\n            className=\"bg-white text-gray-800 p-4 w-96 rounded-md shadow z-20\"\n            onClick={() => setIsPopoverOpen(!isPopoverOpen)}\n          >\n            <h4 className=\"font-semibold py-2\">Statements</h4>\n            <p className=\"py-2\">\n              Send your statements to your favourite apps with Mono. Your\n              information is encrypted using bank grade security.\n            </p>\n            <p className=\"py-2\">\n              Mono will never make your login credentials available to Partners.\n            </p>\n          </div>\n        </ArrowContainer>\n      )}\n    >\n      <button\n        className=\"bg-m-blue-700 text-white px-6 py-2 rounded\"\n        onClick={() => setIsPopoverOpen(!isPopoverOpen)}\n      >\n        More info\n      </button>\n    </Popover>\n  );\n};\n\nStatementModal.propTypes = {};\n","import \"./style.css\";\n\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport classnames from \"classnames\";\nimport chevronUpSVG from \"./assets/images/chevron-up.svg\";\nimport chevronDownSVG from \"./assets/images/chevron-down.svg\";\nimport { StatementModal } from \"../StatementModal\";\n\n/**\n * @param {object} props\n * @param {any} props.className\n * @param {string|boolean} props.expanded\n * @param {(expanded: string) => any} props.onExpandChange\n * @param {string} props.bankName\n * @param {string} props.bankImageUrl\n */\nexport const BankPermission = ({\n  className,\n  bankName,\n  bankImageUrl,\n  expanded,\n  onExpandChange,\n}) => {\n  const bpClassName = classnames(\"block p-2 font-mono\", className);\n  const isExpanded = expanded === bankName || expanded === true;\n\n  return (\n    <div className={bpClassName}>\n      <div\n        className=\"block py-2 border-b border-white\"\n        role=\"button\"\n        onClick={() => onExpandChange(bankName)}\n      >\n        <div className=\"inline-block w-5/6 align-top\">\n          <img className=\"inline\" src={bankImageUrl} alt=\"Bank\" />\n          <span className=\"px-2 pl-2\">{bankName}</span>\n        </div>\n        <div className=\"inline-block w-1/6 align-top text-right\">\n          {isExpanded ? (\n            <img className=\"inline\" src={chevronUpSVG} alt=\"Collapse\" />\n          ) : (\n            <img className=\"inline\" src={chevronDownSVG} alt=\"Expand\" />\n          )}\n        </div>\n      </div>\n      {isExpanded ? (\n        <div className=\"block py-2\">\n          <p className=\"font-semibold py-2\">\n            Floof will be able to access your:\n          </p>\n          <ul className=\"list-none\">\n            <li className=\"list-check py-1\">Account holder named</li>\n            <li className=\"list-check py-1\">Account type</li>\n            <li className=\"list-check py-1\">Account transaction history</li>\n            <li className=\"list-check py-1\">Account balance</li>\n          </ul>\n          <div className=\"text-right py-2\">\n            <StatementModal />\n          </div>\n        </div>\n      ) : null}\n    </div>\n  );\n};\n\nBankPermission.propTypes = {\n  className: PropTypes.any,\n  expanded: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]),\n  onExpandChange: PropTypes.func,\n  bankName: PropTypes.string,\n  bankImageUrl: PropTypes.string,\n};\n\nBankPermission.defaultProps = {\n  onExpandChange: () => {},\n};\n","import \"./style.css\";\n\nimport React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport classnames from \"classnames\";\nimport { BankPermission } from \"../BankPermission\";\n\n/**\n * @param {object} props\n * @param {any} props.className\n * @param {Bank[]} props.banks\n */\nexport const PermissionList = ({ className, banks }) => {\n  const permissionsClassName = classnames(\n    \"bg-m-gray-500 py-1 px-4 rounded font-mono border border-white shadow\",\n    className\n  );\n  const [expanded, setExpanded] = useState(\"Fidelity Bank\");\n\n  return (\n    <div className={permissionsClassName}>\n      <ul className=\"permissions-list-container v-scroll overflow-auto\">\n        {banks?.map((bank) => (\n          <li key={bank.name}>\n            <BankPermission\n              bankName={bank.name}\n              bankImageUrl={bank.imageUrl}\n              expanded={expanded}\n              onExpandChange={setExpanded}\n            />\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nPermissionList.propTypes = {\n  className: PropTypes.any,\n};\n\n/**\n * @typedef {object} Bank\n * @property {string} name\n * @property {string} imageUrl\n */\n","import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport classnames from \"classnames\";\nimport { PermissionList, PermissionSearch } from \"./components\";\nimport { useQuery } from \"react-query\";\n\n/**\n * @param {object} props\n * @param {any} props.className\n * @param {(search: string) => Promise<import(\"./components\").Bank[]>} props.getBanks\n */\nexport const PermissionWidget = ({ className, getBanks }) => {\n  const permissionsClassName = classnames(\n    \"inline-block lg:bg-m-gray-400\",\n    \"py-1 px-4 rounded-3xl font-mono min-h-96 text-left w-full lg:w-128\",\n    className\n  );\n  const [search, setSearch] = useState(\"\");\n  const { data: banks, isLoading } = useQuery([\"getBanks\", search], () =>\n    getBanks(search)\n  );\n\n  return (\n    <div className={permissionsClassName}>\n      <div className=\"hidden lg:block\">\n        <PermissionSearch onSearchChange={setSearch} isLoading={isLoading} />\n      </div>\n      <div className=\"lg:py-4 lg:px-2\">\n        <PermissionList banks={banks} />\n      </div>\n    </div>\n  );\n};\n\nPermissionWidget.propTypes = {\n  className: PropTypes.any,\n  getBanks: PropTypes.func,\n};\n\nPermissionWidget.defaultProps = {\n  getBanks: async () => [],\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { Nav } from \"./common/components/Nav\";\nimport { PermissionWidget } from \"./common/components/PermissionWidget\";\nimport logoSVG from \"./assets/images/logo.svg\";\n\n/**\n *\n * @param {object} props\n * @param {(search: string) => Promise<import(\"./common/components/PermissionWidget/components\").Bank[]>} props.getBanks\n * @returns\n */\nexport const App = ({ getBanks }) => {\n  return (\n    <div className=\"bg-m-blue-400 min-h-screen bg-robot-image\">\n      <Nav />\n      <div className=\"block text-white\">\n        <div className=\"inline-block w-full lg:w-1/2 align-top\">\n          <h1 className=\"text-3xl lg:text-5xl font-sans py-2 lg:py-24 px-12 leading-snug lg:font-semibold w-full lg:w-128\">\n            Give Floof access to your financial data\n          </h1>\n        </div>\n        <div className=\"inline-block w-full lg:w-1/2 align-top text-gray-800 px-4 sm:px-8 md:px-24 lg:px-0 py-8 font-mono text-center\">\n          <PermissionWidget getBanks={getBanks} />\n          <div className=\"py-4\">\n            <span className=\"inline-block text-white bg-m-blue-500 px-2 py-1 rounded\">\n              Powered by <img className=\"inline h-4\" src={logoSVG} alt=\"Logo\" />\n            </span>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nApp.propTypes = {\n  getBanks: PropTypes.func,\n};\n\nApp.defaultProps = {\n  getBanks: (search) =>\n    fetch(`${process.env.REACT_APP_API_URL}/banks?search=${search}`)\n      .then((res) => res.json())\n      .then((body) => {\n        console.log(body);\n        return body.data;\n      }),\n};\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { QueryClient, QueryClientProvider } from \"react-query\";\nimport \"./styles.css\";\nimport { App } from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nconst queryClient = new QueryClient();\n\nReactDOM.render(\n  <React.StrictMode>\n    <QueryClientProvider client={queryClient}>\n      <App />\n    </QueryClientProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}